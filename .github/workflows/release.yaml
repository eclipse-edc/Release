name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: Semantic Version string to use for this release
        required: true
      branch: 
        description: Source branch from which the version should be created. 'main' should never be used, to create a release branch please trigger the "prepare" workflow before.
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  Run-All-Tests:
    name: "Run tests"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repository: [ "runtime-metamodel", "gradleplugins", "connector", "identityhub", "federatedcatalog" ]
    steps:
      - uses: actions/checkout@v4

      - name: "Run test for ${{ matrix.test-def.repo }}"
        run: |
          chmod +x ./scripts/github_action.sh
          ./scripts/github_action.sh "eclipse-edc" "${{ matrix.repository }}" "verify.yaml" "" "${{ secrets.ORG_GITHUB_BOT_USER }}" "${{ secrets.ORG_GITHUB_BOT_TOKEN }}" "${{ inputs.branch }}"

  Publish-Components:
    needs: [ Run-All-Tests ]
    uses: ./.github/workflows/publish-all-in-one.yaml
    with:
      version: ${{ inputs.version }}
      branch: ${{ inputs.branch }}
    secrets: inherit

  Wait-Build-Plugin:
    needs: [ Publish-Components ]
    runs-on: ubuntu-latest
    steps:
      - name: wait until the build plugin pom is available on maven central, because it is mandatory for the "Release-Components" job
        run: |
          export build_pom=https://repo.maven.apache.org/maven2/org/eclipse/edc/edc-build/org.eclipse.edc.edc-build.gradle.plugin/${{ inputs.version }}/org.eclipse.edc.edc-build.gradle.plugin-${{ inputs.version }}.pom
          bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${build_pom})" != "200" ]]; do sleep 5; done'

  Release-Components:
    name: "Release Components"
    runs-on: ubuntu-latest
    needs: [ Wait-Build-Plugin ]
    strategy:
      fail-fast: false
      matrix:
        repository: [ "runtime-metamodel", "gradleplugins", "connector", "identityhub", "federatedcatalog" ]
    steps:
      - uses: actions/checkout@v4
      - name: "Log version"
        run: |
          echo "Will release version ${{ inputs.version }}"

      - name: "Release ${{ matrix.test-def.repo }}"
        run: |
          chmod +x ./scripts/github_action.sh
          ./scripts/github_action.sh "eclipse-edc" "${{ matrix.repository }}" "release.yml" "" "${{ secrets.ORG_GITHUB_BOT_USER }}" "${{ secrets.ORG_GITHUB_BOT_TOKEN }}" "${{ inputs.branch }}"

  Release-Technology-Repositories:
    runs-on: ubuntu-latest
    needs: [ Release-Components ]
    strategy:
      matrix:
        repository: [ "technology-aws", "technology-azure", "technology-gcp" ]
    steps:
      - uses: actions/checkout@v4
      - name: "Log version"
        run: |
          echo "Will release version ${{ inputs.version }}"

      - name: "Release ${{ matrix.test-def.repo }}"
        run: |
          chmod +x ./scripts/github_action.sh
          ./scripts/github_action.sh "eclipse-edc" "${{ matrix.repository }}" "release.yml" "" "${{ secrets.ORG_GITHUB_BOT_USER }}" "${{ secrets.ORG_GITHUB_BOT_TOKEN }}" "${{ inputs.branch }}"

  Post-To-Discord:
    needs: [ Publish-Components, Release-Components ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: sarisia/actions-status-discord@v1
        name: "Invoke discord webhook"
        with:
          webhook: ${{ secrets.DISCORD_GITHUB_CI_WEBHOOK }}
          # if the publishing is skipped, that means the preceding test run failed
          status: ${{ needs.Publish-Components.result == 'skipped' && 'Failure' || needs.Publish-Components.result }}
          title: "Release Core"
          description: "Build and publish ${{ inputs.version }}"
          username: GitHub Actions
